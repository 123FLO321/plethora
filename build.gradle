// For those who want the bleeding edge
buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

plugins {
	id 'com.matthewprenger.cursegradle' version '1.2.0'
	id "com.github.ben-manes.versions" version "0.21.0" // Provides dependencyUpdates task.
}

buildDir = "build"

apply plugin: 'net.minecraftforge.gradle.forge'

version = mc_version + "-" + mod_version
group = "org.squiddev"
archivesBaseName = "plethora"

minecraft {
	version = "${project.mc_version}-${project.forge_version}"
	runDir = "run"
	mappings = "snapshot_20180814"

	replace '${mod_version}', project.mod_version
	replace '${mc_version}', project.mc_version
	replace '${cc_version}', project.cc_version
}

jar {
	manifest {
		attributes(
			'FMLAT': 'Plethora_at.cfg',
		)
	}

	exclude "**/*.java"
}

repositories {
	jcenter()

	maven { url 'http://chickenbones.net/maven' } // CBMP
	maven { url 'http://dvs1.progwml6.com/files/maven' } // JEI + Tinker's
	maven { url 'http://maven.amadornes.com/' } // Multipart
	maven { url 'http://maven.covers1624.net' } // RF
	maven { url 'http://maven.ic2.player.to/' } // IC2 + Forestry
	maven { url 'http://maven.mcmoddev.com' } // Tesla
	maven { url 'https://cc.crzd.me/maven/' } // ComputerCraft
	maven { url 'https://dl.bintray.com/squiddev/maven' } // ConfigGen (why do I use this still?)
	maven { url 'https://maven.tterrag.com' } // EnderCore
	maven { url 'https://maven2.tterrag.com' } // EnderIO
	maven { url 'https://repo.raoulvdberge.com' } // Refined Storage
	maven { url 'https://squiddev.cc/maven/' } // CC: Tweaked
	maven { url 'https://mod-buildcraft.com/maven/' } // Buildcraft
}

def curseMod(String mod, int id, String version) {
	def f = file("lib-${project.mc_version}/${mod}-${version}.jar")
	if (!f.exists()) {
		f.parentFile.mkdirs();

		def url = new URL("https://minecraft.curseforge.com/projects/${mod}/files/${id}/download");
		logger.info("Fetching ${mod} (${version}) from ${url}")

		def connection = url.openConnection();
		connection.setRequestProperty("User-Agent", "Gradle file downloader");
		connection.connect();

		def i = connection.getInputStream();
		f.withOutputStream { it << i }
		i.close()
	}

	files(f)
}

dependencies {
	// deobfCompile "dan200.computercraft:ComputerCraft:${cc_version}-build5"
	deobfCompile "org.squiddev:cc-tweaked:1.12.2-1.81.1"

	compile "mezz.jei:jei_1.12.2:4.15.0.268"

	// External mods with maven dependencies. Have fun when the next version of Minecraft drops!
	compileOnly "appeng:appliedenergistics2:rv6-stable-6"
	compileOnly "codechicken:CodeChickenLib:1.12.2-3.2.2.354:deobf"
	compileOnly("codechicken:ForgeMultipart:1.12.2-2.6.1.81:deobf") { exclude group: "codechicken" }
	compileOnly "cofh:RedstoneFlux:1.12-2.1.0.7:deobf"
	compileOnly "cofh:ThermalExpansion:1.12.2-5.5.3.41:deobf"
	compileOnly("com.enderio:EnderIO:1.12.2-5.0.40") { transitive = false }
	compileOnly "com.enderio.core:EnderCore:1.12.2-0.5.51:deobf"
	compileOnly "com.mod-buildcraft:buildcraft-all:7.99.22"
	compileOnly "MCMultiPart2:MCMultiPart:2.5.3:deobf"
	compileOnly "net.darkhax.tesla:Tesla-1.12.2:1.0.63:deobf"
	compileOnly "net.industrial-craft:industrialcraft-2:2.8.111-ex112:dev"
	compileOnly "net.sengir.forestry:forestry_1.12.2:5.8.2.383:api"
	compileOnly "net.sengir.forestry:forestry_1.12.2:5.8.2.383"
	compileOnly "refinedstorage:refinedstorage:1.6.13-364:deobf"
	compileOnly "slimeknights:TConstruct:1.12.2-2.12.0.116"
	compileOnly "slimeknights.mantle:Mantle:1.12-1.3.3.43"

	// All the Curse mods
	compileOnly curseMod("botania", 2677096, "r1.10-360")
	compileOnly curseMod("baubles", 2518667, "1.12-1.5.2")
	compileOnly curseMod("storage-drawers", 2642386, "1.12.2-5.3.8")
	compileOnly curseMod("chameleon", 2450900, "1.12-4.1.3")
	compileOnly curseMod("blockcraftery", 2681355, "1.2.0")
	compileOnly curseMod("mysticallib", 2681363, "1.12.2-1.1.1")

	compileOnly('org.squiddev:ConfigGen:1.2.5') { exclude group: 'net.minecraftforge' }

	// compileOnly "org.squiddev:forgelint:0.1.1"
	compileOnly "com.google.errorprone:error_prone_annotations:2.0.21"

	testCompile 'junit:junit:4.11'
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "mod_version", project.mod_version
	inputs.property "mc_version", project.mc_version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'mod_version': mod_version, 'mc_version': mc_version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint" << "-Xlint:-rawtypes" << "-Xlint:-processing" << "-parameters"
	}
}

// Not quite ready for common usage, but helped a lot in checking stuff
// compileJava { options.compilerArgs << "-Xplugin:ForgeLint" }

curseforge {
	apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''

	project {
		id = '248425'
		releaseType = 'release'
		changelog = ''

		// relations {
			// requiredLibrary 'computercraft'
		// }
	}
}
